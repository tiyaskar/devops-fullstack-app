name: TechVerito-demo

on:
  push:
    branches: 
      - main

jobs:

  # build-go-backend:
  #   permissions:
  #     id-token: write
  #     contents: read
  #     packages: write
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 2
  #     matrix:
  #       os: [ubuntu-latest]
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #         token: ${{ secrets.GIT_TOKEN }}
          
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.19'
    
  #   - name: 'Set up Docker Buildx'
  #     uses: docker/setup-buildx-action@v2
  #     with:
  #       driver: docker
  #       install: true

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   - name: Build
  #     run: cd ./backend/ && go get ./...

    
  #   - name: 'Build and push ${{ github.head_ref }} Backend Image'
  #     if: success()
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: ./backend/
  #       file: ./backend/Dockerfile
  #       builder: ${{ steps.buildx.outputs.name }}
  #       push: true
  #       tags: '${{ secrets.DOCKERHUB_USERNAME }}/techverito_demo_backend:latest'
  
  # build-node-frontend:
  #   permissions:
  #     id-token: write
  #     contents: read
  #     packages: write
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 2
  #     matrix:
  #       os: [ubuntu-latest]
  #       node-version: [14.17.0]
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #         token: ${{ secrets.GIT_TOKEN }}
          
  #   - name: 'Cache Node dependencies'
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: 14
  #       cache: 'npm'
  #       cache-dependency-path: frontend/package-lock.json
    
  #   - name: 'Set up Docker Buildx'
  #     uses: docker/setup-buildx-action@v2
  #     with:
  #       driver: docker
  #       install: true

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   # - name: Install ${{ github.event.repository.name }} frontend Requirements
  #   #   run: |
  #   #     sudo apt-get install libxmlsec1-dev pkg-config
  #   #     cd frontend
  #   #     npm ci

  #   - name: 'Build and push ${{ github.head_ref }} Frontend Image'
  #     if: success()
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: ./frontend/
  #       file: ./frontend/Dockerfile
  #       builder: ${{ steps.buildx.outputs.name }}
  #       push: true
  #       tags: '${{ secrets.DOCKERHUB_USERNAME }}/techverito_demo_frontend:latest'

  deploy:
    runs-on: ubuntu-latest
    # needs: [build-node-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Minikube
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/techverito_demo_frontend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/techverito_demo_backend:latest
          rm -rf ~/devops-fullstack-app
          git clone https://${{ github.actor }}:${{ secrets.GIT_TOKEN }}@github.com/tiyaskar/devops-fullstack-app.git
          cd devops-fullstack-app && pwd
          kubectl delete deployment frontend || true
          kubectl delete deployment backend || true
          kubectl delete service frontend || true
          kubectl delete service backend || true

          kubectl apply -f ./minikube/frontend-deployment.yaml
          kubectl apply -f ./minikube/backend-deployment.yaml
          echo "tmux new-session -d -s frontend 'kubectl port-forward --address 0.0.0.0 $(kubectl get po --selector=app=frontend -o=name) 8081:80'" >> .script.sh
          echo "tmux new-session -d -s backend 'kubectl port-forward --address 0.0.0.0 $(kubectl get po --selector=app=backend -o=name) 8080:8080'" >> .script.sh
          sudo chmod +x .script.sh && bash -c "./.script.sh"
          # export FRONTEND_POD_NAME=$(kubectl get po --selector=app=frontend -o=name)
          # export BACKEND_POD_NAME=$(kubectl get po --selector=app=backend -o=name)
          # kubectl port-forward --address 0.0.0.0 $FRONTEND_POD_NAME 8081:80
          # kubectl port-forward --address 0.0.0.0 $BACKEND_POD_NAME 8080:8080
        EOF

